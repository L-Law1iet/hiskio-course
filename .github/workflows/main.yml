name: dev

on:
  push:
    branches:
      - 'keel-master'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install required packages
      run: sudo apt-get install -f yamllint shellcheck

    - name: Run shell check
      run: |
        pushd cicd/application
        make shellcheck
        popd
    - name: Run shell check
      run: |
        pushd cicd/application
        make docker-lint
        popd
    - name: Run shell check
      run: |
        pushd cicd/application
        make yaml-lint
        popd
  test-k8s-minikube:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v2

    - name: Install minikube
      run: |
        curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/v1.22.0-beta.0/minikube-linux-amd64
        chmod +x minikube
        sudo mv ./minikube /usr/local/bin

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Install bats
      run: |
        git clone https://github.com/bats-core/bats-core.git
        cd bats-core/
        sudo ./install.sh /usr/local

    - name: Install kubernetes and run Test
      run: |
        minikube start --driver=docker
        pushd cicd/application
        kubectl apply -f yamls
        WAIT_TIME=0 ;until [ $WAIT_TIME -eq 24 ] || [ "3" = "$(kubectl get deployment nginx -ojsonpath='{.status.readyReplicas}')" ]; do echo "sleep ${WAIT_TIME}"; sleep 5; WAIT_TIME=$((WAIT_TIME+1)); done
        TYPE=minikube bats -t tests/test.bats
        popd
  build-image:
    runs-on: ubuntu-latest
    needs: test-k8s-minikube
    steps:
    - uses: actions/checkout@v2
    - name: Set env
      run: echo "::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: Docker login
      run: |
        docker login -u ${{ secrets.dockerUsername }} -p  ${{ secrets.dockerPassword}}
    - name: Build/Push image
      run: |
        pushd cicd/application
        make VERSION=${{ env.RELEASE_VERSION }} OTHER=${{ env.RELEASE_VERSION }} push-image
        popd
